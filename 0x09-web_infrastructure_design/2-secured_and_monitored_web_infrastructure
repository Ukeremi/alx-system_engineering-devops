## File: 2-secured_and_monitored_web_infrastructure

### Secured and Monitored Web Infrastructure Design for www.foobar.com

#### Visual Representation (Text-based Diagram):

```
                     +---------------------------------------+
                     |                                       |
                     |         User's Computer               |
                     |                                       |
                     +---------------+-----------------------+
                                     | HTTPS Request
                                     V
                 +---------------------------------------+
                 |         Load Balancer (HAproxy)       |
                 |   SSL Termination (HTTPS Decryption)  |
                 +---------------+-----------------------+
                                 | Load Balancing (Round Robin)
                                 V
        +------------------------+     +------------------------+
        |         Server 1       |     |        Server 2        |
        |                        |     |                        |
        |  +------------------+  |     |  +------------------+  |
        |  |    Firewall      |  |     |  |    Firewall      |  |
        |  +------------------+  |     |  +------------------+  |
        |                        |     |                        |
        |  +------------------+  |     |  +------------------+  |
        |  |  Web Server      |  |     |  |  Web Server      |  |
        |  |    (Nginx)       |  |     |  |    (Nginx)       |  |
        |  +------------------+  |     |  +------------------+  |
        |                        |     |                        |
        |  +------------------+  |     |  +------------------+  |
        |  | Application      |  |     |  | Application      |  |
        |  | Server           |  |     |  | Server           |  |
        |  +------------------+  |     |  +------------------+  |
        |                        |     |                        |
        |  +------------------+  |     |  +------------------+  |
        |  | Application      |  |     |  | Application      |  |
        |  | Files (Code Base)|  |     |  | Files (Code Base)|  |
        |  +------------------+  |     |  +------------------+  |
        |                        |     |                        |
        |  +------------------+  |     |  +------------------+  |
        |  | Database         |  |     |  | Database         |  |
        |  | (MySQL)          |  |     |  | (MySQL)          |  |
        |  +------------------+  |     |  +------------------+  |
        +------------------------+     +------------------------+
```

#### Documentation:

The above text-based diagram illustrates a three-server secured and monitored web infrastructure that hosts the website www.foobar.com. Let's go through the components and their roles:

- **User's Computer:** Represents the user's device (e.g., laptop, smartphone) from which they access the website.

- **Load Balancer (HAproxy):** The load balancer distributes incoming HTTPS requests across the two web servers to ensure efficient utilization of resources and high availability.

- **SSL Termination (HTTPS Decryption):** The load balancer performs SSL termination by decrypting the HTTPS traffic and forwarding the requests as regular HTTP to the web servers. This allows the web servers to handle non-encrypted traffic and offloads the decryption process from them.

- **Server 1 and Server 2:** The two servers in the infrastructure that host the website. They work in tandem to handle incoming requests and distribute the load.

- **Firewall:** Each server is equipped with a firewall to enhance security by controlling incoming and outgoing traffic based on predefined security rules.

- **Web Server (Nginx):** Nginx is used as the web server on both Server 1 and Server 2 to handle incoming HTTPS requests and serve web pages.

- **Application Server:** The application server processes dynamic content, executes application-specific tasks, and communicates with the database.

- **Application Files (Code Base):** Contains the code for the website's functionality.

- **Database (MySQL):** MySQL is the database management system used to store and manage website data.

#### Explanation of Additional Elements:

- **Firewalls:** We added firewalls to each server to protect the infrastructure from unauthorized access and potential security threats. Firewalls control the traffic flow based on rules, ensuring only legitimate requests are allowed.

- **SSL Termination:** The load balancer terminates SSL at the load balancer level, relieving the web servers from the burden of SSL decryption. This offloading improves the web server's performance and reduces processing overhead.

#### Monitoring:

- **Monitoring Clients (Data Collector for Sumologic or other monitoring services):** Each server is equipped with monitoring clients that collect performance metrics, logs, and other relevant data from the servers. The monitoring clients forward this data to a centralized monitoring service like Sumologic for analysis and visualization.

- **What is Monitoring Used for:** Monitoring is essential for tracking server performance, identifying potential issues, and ensuring the infrastructure operates optimally. It helps detect anomalies, resource bottlenecks, and security incidents.

- **How Monitoring Tool Collects Data:** The monitoring tool collects data from the monitoring clients on each server. It can access server metrics, log files, and other data points through APIs or direct connections.

- **Monitoring Web Server QPS:** To monitor the web server's QPS (Queries Per Second), you can use the monitoring tool to track the number of incoming HTTP requests over a specific time interval. The monitoring tool can display this data in graphs or provide real-time alerts if the QPS exceeds predefined thresholds.

#### Issues with this Infrastructure:

- **Terminating SSL at the Load Balancer Level:** While terminating SSL at the load balancer improves web server performance, it could become a security issue if the communication between the load balancer and web servers is not adequately protected. Traffic between the load balancer and web servers should be secured to prevent eavesdropping or tampering.

- **Single MySQL Server Capable of Accepting Writes:** Having only one MySQL server that can accept write operations poses a single point of failure. If the MySQL server fails, write operations won't be possible until the issue is resolved.

- **Servers with Same Components:** All servers in the infrastructure have the same components, such as web server, application server, and database. This configuration can lead to resource contention and inefficiencies. A better approach would be to distribute the components based on their workload and resource requirements.

#### Authors:

- Ukpono Umoren
- Alexander Udeogaranya
